org: edsabino
app: pet-users-service
service: pet-users-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  lambdaHashingVersion: '20201221'
  environment:
    MONGO_URI: mongodb+srv://adm:9XIh4bdywjikBOKu@development.khj7l.mongodb.net/pet-user-db
    SNS_TOPIC_EMAIL: ${self:custom.snsTopicEmail}
    SECRET: segredosecreto
    REDIS_HOST:
      "Fn::GetAtt": [ElasticCacheCluster, RedisEndpoint.Address]
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - "sns:Publish"
          Resource:
            - ${self:custom.snsTopicEmail}
  
custom:
  snsTopicEmail: arn:aws:sns:us-east-1:136545430773:pet-emails
  config:
    CACHE_INSTANCE_SIZE: cache.t2.micro

functions:
  create:
    handler: handlers.create
    events:
      - http:
          path: /
          method: post
          cors: true

  get:
    handler: handlers.get
    events:
      - http:
          path: /{_id}
          method: get
          cors: true

  update:
    handler: handlers.update
    events:
      - http:
          path: /{_id}
          method: put
          cors: true

  list:
    handler: handlers.list
    events:
      - http:
          path: /
          method: get
          cors: true

  forgot_password:
    handler: handlers.forgotPassword
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
      subnetIds:
        - Ref: PrivateSubnet
    events:
      - http:
          path: /forgot_password/{email}
          method: post
          cors: true

  login:
    handler: handlers.login
    events:
      - http:
          path: /login
          method: post
          cors: true

resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    PrivateSubnet:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}
        CidrBlock: "10.0.1.0/24"
    ServerlessCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
          - Ref: PrivateSubnet
    ServerlessSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: VPC
    ServerlessStorageSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
    ElasticCacheCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: ${self:custom.config.CACHE_INSTANCE_SIZE}
        NumCacheNodes: 1
        VpcSecurityGroupIds:
          - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: ServerlessCacheSubnetGroup
plugins:
  - serverless-offline
