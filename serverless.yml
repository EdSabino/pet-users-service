org: edsabino
app: pet-users-service
service: pet-users-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  lambdaHashingVersion: '20201221'
  environment:
    MONGO_URI: mongodb+srv://adm:9XIh4bdywjikBOKu@development.khj7l.mongodb.net/pet-user-db
    SNS_TOPIC_EMAIL: ${self:custom.snsTopicEmail}
    SECRET: segredosecreto
    REDIS_HOST:
      "Fn::GetAtt": [ElasticCacheCluster, RedisEndpoint.Address]
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - "sns:Publish"
          Resource:
            - ${self:custom.snsTopicEmail}
  
custom:
  snsTopicEmail: arn:aws:sns:us-east-1:136545430773:pet-emails
  config:
    CACHE_INSTANCE_SIZE: cache.t2.micro

functions:
  auth:
    handler: handlers.auth
  create:
    handler: handlers.create
    events:
      - http:
          path: /
          method: post
          cors: true
  get:
    handler: handlers.get
    events:
      - http:
          path: /{_id}
          method: get
          cors: true
  update:
    handler: handlers.update
    events:
      - http:
          path: /{_id}
          method: put
          cors: true
  list:
    handler: handlers.list
    events:
      - http:
          path: /
          method: get
          cors: true
  forgot_password:
    handler: handlers.forgotPassword
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ServerlessSecurityGroup, GroupId]
      subnetIds:
        - Ref: PrivateSubnet
    events:
      - http:
          path: /forgot_password/{email}
          method: post
          cors: true
  login:
    handler: handlers.login
    events:
      - http:
          path: /login
          method: post
          cors: true
  recycle:
    handler: handlers.recycle
    events:
      - http:
          path: /recycle
          method: put
          cors: true
          authorizer: auth

resources:
  Resources:
    ${file(resources.yml)}

plugins:
  - serverless-offline
