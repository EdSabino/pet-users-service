org: edsabino
app: pet
service: pet-users-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  lambdaHashingVersion: '20201221'
  vpc:
    securityGroupIds:
      - "Fn::GetAtt": [ServerlessSecurityGroup, GroupId]
    subnetIds:
      - Ref: PrivateSubnet
  environment:
    MONGO_URI: mongodb+srv://adm:9XIh4bdywjikBOKu@development.khj7l.mongodb.net/pet-user-db
    SNS_TOPIC_EMAIL: ${self:custom.snsTopicEmail}
    SECRET: segredosecreto
    REDIS_HOST:
      "Fn::GetAtt": [ElasticCacheCluster, RedisEndpoint.Address]
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - "sns:Publish"
          Resource:
            - ${self:custom.snsTopicEmail}
  
custom:
  stage: ${opt:stage, self:provider.stage}
  snsTopicEmail: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiId
  config:
    CACHE_INSTANCE_SIZE: cache.t2.micro

functions:
  auth:
    handler: handlers.authorize
  create:
    handler: handlers.create
    events:
      - http:
          path: /users
          method: post
          cors: true
  get:
    handler: handlers.get
    events:
      - http:
          path: /users/{_id}
          method: get
          cors: true
  update:
    handler: handlers.update
    events:
      - http:
          path: /users/{_id}
          method: put
          cors: true
  list:
    handler: handlers.list
    events:
      - http:
          path: /users
          method: get
          cors: true
  forgot_password:
    handler: handlers.forgotPassword
    events:
      - http:
          path: /users/forgot_password/{email}
          method: post
          cors: true
  login:
    handler: handlers.login
    events:
      - http:
          path: /users/login
          method: post
          cors: true
  recycle:
    handler: handlers.recycle
    events:
      - http:
          path: /users/recycle
          method: put
          cors: true
          authorizer: auth

  confirm_email:
    handler: handlers.confirmEmail
    events:
      - http:
          path: /users/confirm_email/{uuid}
          method: put
          cors: true

  change_password:
    handler: handlers.changePassword
    events:
      - http:
          path: /users/change_password/{uuid}
          method: put
          cors: true

resources:
  Resources:
    ${file(resources.yml)}

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.stage}-ExtApiGatewayRestApiId
    
    ApiGatewayRestApiRootResourceId:
      Value:
          Fn::GetAtt: [ApiGatewayRestApi, RootResourceId]
      Export:
        Name: ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId

    ServerlessSecurityGroupId:
      Value:
        - "Fn::GetAtt": [ServerlessSecurityGroup, GroupId]
      Export:
        Name: ${self:custom.stage}-ServerlessSecurityGroupId

    SubnetIds:
      Value:
        Ref: PrivateSubnet
      Export:
        Name: ${self:custom.stage}-SubnetIds


plugins:
  - serverless-offline
